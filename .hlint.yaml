# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# To run HLint do:
# $ hlint --git -j4

# Warnings currently triggered by our code
- ignore: {name: "Use <$>"}
- ignore: {name: "Use :"}
- ignore: {name: "Redundant do"}
- ignore: {name: "Avoid lambda"}
- ignore: {name: "Use newtype instead of data"}
- ignore: {name: "Use fromMaybe"}
- ignore: {name: "Use unless"}
- ignore: {name: "Move brackets to avoid $"}
- ignore: {name: "Eta reduce"}
- ignore: {name: "Parse error"}
- ignore: {name: "Reduce duplication"}
- ignore: {name: "Use ++"}
- ignore: {name: "Use $>"}
- ignore: {name: "Use section"}
- ignore: {name: "Use record patterns"}
- ignore: {name: "Use camelCase"}
- ignore: {name: "Use uncurry"}
- ignore: {name: "Avoid lambda using `infix`"}

# Off by default hints we like
# - warn: {name: Use module export list}

# Condemn nub and friends
- warn: {lhs: nub (sort x), rhs: Data.List.Extra.nubSort x}
- warn: {lhs: nub, rhs: Data.List.Extra.nubOrd}
- warn: {lhs: nubBy, rhs: Data.List.Extra.nubOrdBy}
- warn: {lhs: Data.List.Extra.nubOn, rhs: Data.List.Extra.nubOrdOn}

# DA specific hints
- warn: {lhs: Data.Text.pack (DA.Pretty.renderPlain x), rhs: DA.Pretty.renderPlain x}
- warn: {lhs: Data.Text.Extended.pack (DA.Pretty.renderPlain x), rhs: DA.Pretty.renderPlain x}
- warn: {lhs: DA.Pretty.renderPlain (DA.Pretty.pretty x), rhs: DA.Pretty.renderPretty x}
- warn: {lhs: System.Environment.setEnv, rhs: System.Environment.Blank.setEnv}

# Specify additional command line arguments
#
- arguments: ["--cpp-include=include"]

- extensions:
  - default: true

- flags:
  - default: false
  - name: [-Wno-orphans, -Wno-warn-orphans, -fno-warn-orphans]
    within:
    - AutoTupleSpec
    - Development.IDE.GHC.Orphans
    - Ide.Plugin.Eval.Code
    - Ide.Plugin.Eval.CodeLens
    - Ide.Plugin.Eval.GHC
    - Ide.Plugin.Eval.Types
    - Ide.Plugin.Eval.Util
    - Ide.Plugin.ExplicitImports
    - Ide.Plugin.Hlint
    - Ide.Plugin.Retrie
    - Ide.Plugin.Tactic.Machinery
    - Ide.Plugin.Tactic.Types
    - Main
    - UnificationSpec
  - {name: [-Wno-missing-signatures, -Wno-overlapping-patterns, -Wno-incomplete-patterns, -Wno-missing-fields, -Wno-unused-matches]}
  - {name: [-Wno-dodgy-imports,-Wno-incomplete-uni-patterns], within: [Main, Development.IDE.GHC.Compat, Ide.Main, Ide.Arguments]}
  - name: [-Wno-warn-type-defaults, -fno-warn-type-defaults]
    within:
    - Ide.Plugin.Eval.CodeLens
    - Ide.Plugin.Eval.GHC
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
- functions:
  # Things that are unsafe in Haskell base library
  - {name: unsafeInterleaveIO, within: []}
  - {name: unsafeDupablePerformIO, within: []}
  - {name: unsafeCoerce, within: []}
  # Things that are a bit dangerous in the GHC API
  - {name: nameModule, within: []}

# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}

# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}

# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules

# Define some custom infix operators
# - fixity: infixr 3 ~^#^~
